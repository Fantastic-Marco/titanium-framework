group = 'com.titanium'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}


allprojects {
    // 应用共享插件
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'

    group = 'com.titanium'
    version = '0.0.1-SNAPSHOT'

    buildscript {
        ext {
            //框架
            springBootVersion = '3.2.5'

            //持久化
            fluentMybatisVersion = '1.9.2'
            mysqlConnectorVersion = '8.0.28'
            hikariCpVersion = '5.1.0'
            mybatisPlusVersion = '3.5.7'

            //公共
            lombokVersion = '1.18.30'
            hutoolVersion = '5.8.20'

            //序列化
            jacksonVersion = '2.16.0'

            //其他
            aptVersion = '0.21'
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        // 其他共享依赖
        api "org.projectlombok:lombok:${lombokVersion}" // Lombok 库，同时用于编译和运行时
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    }
}

subprojects {


    group = 'com.titanium'
    version = '0.0.1-SNAPSHOT'

    // 设置最低支持的 JDK 版本
    java.sourceCompatibility = JavaVersion.VERSION_17
    java.targetCompatibility = JavaVersion.VERSION_17



    repositories {
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/public/' }
    }

    // 打包sourcesJar任务
    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    // 打包javadocJar任务
    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        // 或者只关闭特定的检查，例如关闭return检查：
        // options.addStringOption('Xdoclint:-missing', '-quiet')
    }

    // 解决javadoc打包乱码
    javadoc {
        options {
            encoding "UTF-8"
            charSet 'UTF-8'
            author true
            version true
//            title "文档大标题"
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
                // 增加 sourcesJar、javadocJar 任务
                artifact sourcesJar
                artifact javadocJar
            }
        }

        repositories {
            maven {
                url 'file://' + System.getProperty('user.home') + '/.m2/repository'
            }
        }
    }

    task publishToLocal {
        group = 'build'
        dependsOn tasks.clean
        dependsOn tasks.build
        dependsOn tasks.publish
        dependsOn tasks.publishMavenPublicationToMavenLocal
        print(model.getName() + " :publishToLocal: " + System.getProperty('user.home') + '/.m2/repository\n')
    }

    publishToLocal.description = 'Publish to local maven repository'

    dependencies {
        api "org.projectlombok:lombok:${lombokVersion}" // Lombok 库，同时用于编译和运行时
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        api "cn.hutool:hutool-all:${hutoolVersion}"
    }
}
